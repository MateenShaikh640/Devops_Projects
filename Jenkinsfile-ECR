@Library('my-shared-library') _

pipeline {
    agent any
    parameters {
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose Create/Destroy')
        // string(name: 'ImageName', description: "Name of docker build", defaultValue: 'javapp')
        // string(name: 'ImageTag', description: "Tag of docker build", defaultValue: 'v1')
        // string(name: 'DockerHubUser', description: "Name of DockerHubUser", defaultValue: 'mateenshaikh00')
        string(name: 'aws_account_id', description: "AWS account id", defaultValue: '3169-5812-4144')
        string(name: 'region', description: "AWS account region", defaultValue: 'ap-south-1')
        string(name: 'reponame', description: "ECR repo name ", defaultValue: 'mateenshaikh01')
       
    }
    stages {
        stage("Git CheckOut") {
            when { expression { params.action == 'create' } }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        gitCheckout(
                            branch: "main",
                            url: "https://github.com/MateenShaikh640/Devops_Projects.git"
                        )
                    }
                }
            }
        }
        stage("maven test") {
            when { expression { params.action == 'create' } }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        mvnTest()
                    }
                }
            }
        }
        stage("integration test") {
            when { expression { params.action == 'create' } }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        mvnintegationTest()
                    }
                }
            }
        }
        stage("static code analysis: sonarqube") {
            when { expression { params.action == 'create' } }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        def SonarQubecredentialsId = 'sonar-token'
                        staticCodeAnalysis(SonarQubecredentialsId)
                    }
                }
            }
        }
        stage("Quality Gate: sonarqube") {
            when { expression { params.action == 'create' } }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        def SonarQubecredentialsId = 'sonar-token'
                        QualityGateStatus(SonarQubecredentialsId)
                    }
                }
            }
        }
        stage("maven Build: Maven") {
            when { expression { params.action == 'create' } }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        mvnBuild()
                    }
                }
            }
        }
        stage('Docker image build:ECR') {
            when { expression { params.action == 'create' } }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        dockerBuild("${params.aws_account_id}", "${params.region}", "${params.reponame}")
                    }
                }
            }
        }
             stage('Docker image scann:triyva') {
            when { expression { params.action == 'create' } }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        dockerimageScan("${params.aws_account_id}", "${params.region}", "${params.reponame}")
                    }
                }
            }
        }
         stage('Docker image push:ECR') {
            when { expression { params.action == 'create' } }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        dockerimagePush("${params.aws_account_id}", "${params.region}", "${params.reponame}")
                    }
                }
            }
        }
                 stage('Docker image cleanup:ECR') {
            when { expression { params.action == 'create' } }
            steps {

                    script {
                        dockerimageCleanup("${params.aws_account_id}", "${params.region}", "${params.reponame}")
                    }

            }
        }
    }
}
